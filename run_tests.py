#!/usr/bin/env python3
"""
Test Runner f√ºr das RAG-System.

F√ºhrt alle Tests aus und behebt Import-Probleme durch korrekte Pfad-Konfiguration.
"""

import os
import sys
import subprocess
from pathlib import Path

# Projektverzeichnis ermitteln
PROJECT_ROOT = Path(__file__).parent.absolute()
SRC_DIR = PROJECT_ROOT / "src"
TESTS_DIR = PROJECT_ROOT / "tests"

# Pfade zu sys.path hinzuf√ºgen
sys.path.insert(0, str(SRC_DIR))
sys.path.insert(0, str(PROJECT_ROOT))

# Umgebungsvariable f√ºr Python-Pfad setzen
os.environ["PYTHONPATH"] = f"{SRC_DIR}{os.pathsep}{PROJECT_ROOT}{os.pathsep}{os.environ.get('PYTHONPATH', '')}"

def run_tests():
    """F√ºhrt alle Tests aus."""
    print("=" * 60)
    print("RAG-System Test Runner")
    print("=" * 60)

    # Test-Verzeichnis pr√ºfen
    if not TESTS_DIR.exists():
        print(f"‚ùå Test-Verzeichnis nicht gefunden: {TESTS_DIR}")
        return False

    # Verf√ºgbare Testdateien finden
    test_files = list(TESTS_DIR.glob("test_*.py"))

    if not test_files:
        print("‚ùå Keine Testdateien gefunden")
        return False

    print(f"üìÅ Projektverzeichnis: {PROJECT_ROOT}")
    print(f"üìÅ Src-Verzeichnis: {SRC_DIR}")
    print(f"üìÅ Test-Verzeichnis: {TESTS_DIR}")
    print(f"üß™ Gefundene Testdateien: {len(test_files)}")

    for test_file in test_files:
        print(f"   - {test_file.name}")

    print("\n" + "=" * 60)
    print("Starte Tests...")
    print("=" * 60)

    # Tests ausf√ºhren
    try:
        # Arbeitsverzeichnis wechseln
        os.chdir(PROJECT_ROOT)

        # pytest mit korrekten Parametern ausf√ºhren
        cmd = [
            sys.executable, "-m", "pytest",
            str(TESTS_DIR),
            "-v",
            "--tb=short",
            "--disable-warnings",
            "-x"  # Stoppe bei erstem Fehler
        ]

        print(f"üöÄ Ausf√ºhrung: {' '.join(cmd)}")
        print(f"üìÇ Arbeitsverzeichnis: {os.getcwd()}")
        print(f"üêç Python-Pfad: {sys.executable}")
        print(f"üì¶ PYTHONPATH: {os.environ.get('PYTHONPATH', 'Nicht gesetzt')}")

        result = subprocess.run(cmd, capture_output=True, text=True)

        # Ausgabe anzeigen
        if result.stdout:
            print("\nüìã Test-Ausgabe:")
            print(result.stdout)

        if result.stderr:
            print("\n‚ö†Ô∏è  Fehler-Ausgabe:")
            print(result.stderr)

        # Ergebnis auswerten
        if result.returncode == 0:
            print("\n‚úÖ Alle Tests erfolgreich!")
            return True
        else:
            print(f"\n‚ùå Tests fehlgeschlagen (Exit Code: {result.returncode})")
            return False

    except Exception as e:
        print(f"‚ùå Fehler beim Ausf√ºhren der Tests: {e}")
        return False

def run_specific_test(test_name: str):
    """F√ºhrt einen spezifischen Test aus."""
    print(f"üß™ F√ºhre spezifischen Test aus: {test_name}")

    try:
        os.chdir(PROJECT_ROOT)

        cmd = [
            sys.executable, "-m", "pytest",
            f"{TESTS_DIR}/{test_name}",
            "-v",
            "--tb=short",
            "--disable-warnings"
        ]

        result = subprocess.run(cmd, capture_output=True, text=True)

        if result.stdout:
            print(result.stdout)

        if result.stderr:
            print(result.stderr)

        return result.returncode == 0

    except Exception as e:
        print(f"‚ùå Fehler beim Ausf√ºhren des Tests: {e}")
        return False

def check_dependencies():
    """Pr√ºft verf√ºgbare Abh√§ngigkeiten."""
    print("\nüîç Pr√ºfe verf√ºgbare Abh√§ngigkeiten...")

    dependencies = {
        "numpy": "‚úÖ Erforderlich",
        "pandas": "‚úÖ Erforderlich",
        "scikit-learn": "‚úÖ Erforderlich",
        "sentence-transformers": "‚ö†Ô∏è  Optional",
        "chromadb": "‚ö†Ô∏è  Optional",
        "faiss-cpu": "‚ö†Ô∏è  Optional",
        "openai": "‚ö†Ô∏è  Optional",
        "requests": "‚úÖ Erforderlich f√ºr Ollama"
    }

    for dep, status in dependencies.items():
        try:
            __import__(dep.replace("-", "_"))
            print(f"   ‚úÖ {dep} - {status}")
        except ImportError:
            print(f"   ‚ùå {dep} - {status}")

    # Ollama-Verf√ºgbarkeit pr√ºfen
    try:
        import requests
        response = requests.get("http://localhost:11434/api/tags", timeout=1)
        if response.status_code == 200:
            print("   ‚úÖ Ollama Service - Verf√ºgbar")
        else:
            print("   ‚ùå Ollama Service - Nicht verf√ºgbar")
    except:
        print("   ‚ùå Ollama Service - Nicht verf√ºgbar")

def run_quick_test():
    """F√ºhrt einen schnellen Test der Grundfunktionalit√§t aus."""
    print("\nüöÄ Schneller Funktionalit√§tstest...")

    try:
        # Basis-Imports testen
        from components.chunkers import LineChunker
        from components.embeddings import SentenceTransformerEmbedding
        from components.vector_stores import InMemoryVectorStore
        from evaluations import RetrievalEvaluator, GenerationEvaluator

        print("   ‚úÖ Basis-Imports erfolgreich")

        # Einfache Komponenten-Tests
        chunker = LineChunker(chunk_size=100)
        chunks = chunker.chunk_text("Das ist ein Test. Das ist ein weiterer Test.")
        print(f"   ‚úÖ Chunker: {len(chunks)} Chunks erstellt")

        # Embedding-Test (wenn verf√ºgbar)
        try:
            embedding = SentenceTransformerEmbedding()
            if embedding.available:
                emb = embedding.embed_query("Test")
                print(f"   ‚úÖ Embedding: Dimension {len(emb)}")
            else:
                print("   ‚ö†Ô∏è  Embedding: Nicht verf√ºgbar")
        except:
            print("   ‚ö†Ô∏è  Embedding: Fehler")

        # Vector Store Test
        vector_store = InMemoryVectorStore()
        print("   ‚úÖ Vector Store: Initialisiert")

        # Evaluator Test
        evaluator = RetrievalEvaluator()
        print("   ‚úÖ Evaluator: Initialisiert")

        print("\n‚úÖ Schnelltest erfolgreich!")
        return True

    except Exception as e:
        print(f"\n‚ùå Schnelltest fehlgeschlagen: {e}")
        return False

def main():
    """Hauptfunktion."""
    if len(sys.argv) > 1:
        if sys.argv[1] == "quick":
            check_dependencies()
            run_quick_test()
        elif sys.argv[1] == "deps":
            check_dependencies()
        elif sys.argv[1].startswith("test_"):
            run_specific_test(sys.argv[1])
        else:
            print("Verf√ºgbare Optionen:")
            print("  python run_tests.py        - Alle Tests ausf√ºhren")
            print("  python run_tests.py quick  - Schnelltest")
            print("  python run_tests.py deps   - Abh√§ngigkeiten pr√ºfen")
            print("  python run_tests.py test_components.py - Spezifischen Test ausf√ºhren")
    else:
        check_dependencies()
        run_quick_test()
        run_tests()

if __name__ == "__main__":
    main()